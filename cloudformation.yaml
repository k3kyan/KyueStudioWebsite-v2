Transform: AWS::Serverless-2016-10-31
Resources:
  # PURPOSE: Contact Form Messages DynamoDB Table
  ContactFormMessages:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete #TEMP for now
    UpdateReplacePolicy: Delete #TEMP for now
    Properties:
      TableName: !Sub kyue-contact-form-messages-table-CICD-CLOUDFORMATION-${AWS::AccountId}-${Environment}
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        # - AttributeName: timestamp
        #   AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        # - AttributeName: timestamp
        #   KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  # PURPOSE: Blog Posts Metadata DynamoDB Table (only the metadata for the blog posts, does not store thumbnails, images, or md content)
  BlogPostsMetadata:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete #TEMP for now
    UpdateReplacePolicy: Delete #TEMP for now
    Properties:
      TableName: !Sub kyue-blog-posts-metadata-table-CICD-CLOUDFORMATION-${AWS::AccountId}-${Environment}
      # PrimaryKey:
      #   Name: id
      #   Type: String
      # ProvisionedThroughput:
      #   ReadCapacityUnits: 2
      #   WriteCapacityUnits: 2
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        # - AttributeName: timestamp
        #   AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        # - AttributeName: timestamp
        #   KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  #  PURPOSE: S3 bucket to host single page app website + hosts content of blog posts (markdown, images, etc...) (referenced by the metadata in the blog posts metadata table)
  KyueStudioWebsiteS3BucketV2:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      # BucketEncryption:
      #   ServerSideEncryptionConfiguration:
      #   - BucketKeyEnabled: true
      VersioningConfiguration:
        Status: Enabled
      BucketName: !Sub kyuestudio-content-cfn-CICD-CLOUDFORMATION-${AWS::AccountId}-${Environment}
      WebsiteConfiguration:
        IndexDocument: index.html
  #  --------------------------- START OF SAM YAML TEMPLATE COPY PASTE - PURPOSE: S3 bucket to host single page app website + hosts content of blog posts (markdown, images, etc...) (referenced by the metadata in the blog posts metadata table)
  KyueStudioWebsiteS3BucketV2Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref KyueStudioWebsiteS3BucketV2
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForCloudFrontPrivateContent
        Statement:
        - Sid: AllowCloudFrontServicePrincipal
          Effect: Allow
          Principal:
            Service: cloudfront.amazonaws.com
          Action: s3:GetObject
          Resource: !Join ['', ['arn:aws:s3:::', !Ref KyueStudioWebsiteS3BucketV2, /*]]
          Condition:
            StringEquals:
              AWS:SourceArn: !Join ['', ['arn:aws:cloudfront::', !Ref "AWS::AccountId",
                  ':distribution/', !Ref CloudFrontDistribution]]
  # CloudFront Distribution for hosting the single page app website
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !GetAtt KyueStudioWebsiteS3BucketV2.RegionalDomainName
          Id: myS3Origin
          OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
          S3OriginConfig:
            OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: index.html
        HttpVersion: http2
        DefaultCacheBehavior:
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          CachedMethods:
          - GET
          - HEAD
          TargetOriginId: myS3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all
          MinTTL: 0
          DefaultTTL: 3600
          MaxTTL: 86400
        PriceClass: PriceClass_200
        Restrictions:
          GeoRestriction:
            RestrictionType: whitelist
            Locations:
            - US
            - CA
            - GB
            - DE
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${KyueStudioWebsiteS3BucketV2} OAC"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  # ApplicationResourceGroup:
  #   Type: AWS::ResourceGroups::Group
  #   Properties:
  #     Name:
  #       Fn::Sub: ApplicationInsights-CFN-${AWS::StackName}
  #     ResourceQuery:
  #       Type: CLOUDFORMATION_STACK_1_0
  # ApplicationInsightsMonitoring:
  #   Type: AWS::ApplicationInsights::Application
  #   Properties:
  #     ResourceGroupName:
  #       Ref: ApplicationResourceGroup
  #     AutoConfigurationEnabled: 'true'
  #  --------------------------- END OF SAM YAML TEMPLATE COPY PASTE - PURPOSE: The Lambda Handler function that allows this FastAPI backend to communicate with API Gateway endpoints ---------------------------
  KyueStudioLambdaFunctionV2:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: KyueStudioLambdaFunctionV2
      CodeUri: s3://kyuestudiowebsite/kyue-studio-backend/backend.zip # ?? !Ref KyueStudioWebsiteS3BucketV2 ??
      Handler: main.handler
      # Runtime: nodejs20.x
      # Architectures:
      # - x86_64
      # TODO: why wont this update ?? it keeps uploading as python3.10 for some reason ???
      Runtime: python3.13
      MemorySize: 3008
      Timeout: 30
      # MemorySize: 128
      # Timeout: 100
      Tracing: Active
      FunctionUrlConfig:
        AuthType: NONE
        Cors:
          AllowOrigins:
            - '*'
          # MAY OR MAY NOT NEED THESE ??!!??!?! Works on manually made lambda function with only "Allow origin" = *, so these other cors configs may not be needed. delete if something goes wrong maybe.
          AllowHeaders:
            - '*'
          ExposeHeaders:
            - '*'
          AllowMethods:
            - '*'
      # Events:
      #   Api:
      #     Type: Api
      #     Properties:
      #       Path: /
      #       Method: GET 
      #       RestApiId:
      #         Ref: ApiGatewayApi
      Environment:
        Variables:
          CONTACTFORMMESSAGES_TABLE_NAME: !Ref ContactFormMessages
          CONTACTFORMMESSAGES_TABLE_ARN: !GetAtt ContactFormMessages.Arn
          BLOGPOSTSMETADATA_TABLE_NAME: !Ref BlogPostsMetadata
          BLOGPOSTSMETADATA_TABLE_ARN: !GetAtt BlogPostsMetadata.Arn
          ADMIN_USERNAME: tempUsernameEV
          ADMIN_PASSWORD: tempPasswordEV
          SECRET_KEY: 725898e2e6208a094e60f59ebf97b32940f4902b1ffe606be5f67dc89cf74ee0
          ALGORITHM: HS256
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
          ENV_MODE: aws
          KYUESTUDIOWEBSITES3BUCKETV2_BUCKET_NAME: !Ref KyueStudioWebsiteS3BucketV2
          KYUESTUDIOWEBSITES3BUCKETV2_BUCKET_ARN: !GetAtt KyueStudioWebsiteS3BucketV2.Arn
          # LAMBDA_API_URL: !GetAtt KyueStudioLambdaFunctionV2.FunctionUrl
          # ??? (From SAM YAML): Make DynamoDB endpoint accessible as environment variable from function code during execution
          ENDPOINT_OVERRIDE: ''
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContactFormMessages
        - DynamoDBCrudPolicy:
            TableName: !Ref BlogPostsMetadata
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${KyueStudioWebsiteS3BucketV2}
                - !Sub arn:${AWS::Partition}:s3:::${KyueStudioWebsiteS3BucketV2}/*
  # # PURPOSE: ????? i think so i can access my lambda function publically...?
  # KyueStudioLambdaFunctionV2UrlPermission: # ???? is this valid ????
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:InvokeFunctionUrl
  #     FunctionName: !Ref KyueStudioLambdaFunctionV2
  #     Principal: "*"
  #     FunctionUrlAuthType: NONE
  # #  PURPOSE: ????? i think so i cloudwatch can get my lambda function logs...?
  KyueStudioLambdaFunctionV2LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${KyueStudioLambdaFunctionV2}
  # #  PURPOSE: API Gateway that connects lambda backend to frontend through endpoints, handles CORS etc
  # # This is an API gateway associated with the getByIdFunction and putItemFunctions
  # ApiGatewayApi:
  #   Type: AWS::Serverless::Api
  #   Properties:
  #     StageName: Prod
  #     Cors:
  #       AllowMethods: "'*'"
  #       AllowHeaders: "'Content-Type'"
  #       AllowOrigin: "'*'" #DO NOT USE THIS VALUE IN PRODUCTION - https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html


# Outputs:
#   LambdaFunctionUrl:
#     Description: Public URL for FastAPI Lambda function
#     Value: !GetAtt KyueStudioLambdaFunctionV2.FunctionUrl
#     Export:
#       Name: KyueStudioLambdaFunctionUrl


# Outputs:
#   KyueStudioLambdaFunctionUrl:
#     Description: The public Function URL of the FastAPI Lambda
#     Value: !GetAtt KyueStudioLambdaFunctionV2.FunctionUrl
#     Export:
#       Name: KyueStudioLambdaFunctionUrl
Outputs:
  # # --------------------DESCRIPTION
  # APIGatewayEndpoint:
  #   Description: API Gateway endpoint URL for Prod stage
  #   Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  # --------------------DESCRIPTION
  CloudFrontDistributionId:
    Description: CloudFront Distribution ID for hosting web front end
    Value: !Ref CloudFrontDistribution
  # --------------------DESCRIPTION
  CloudFrontDistributionDomainName:
    Description: CloudFront Distribution Domain Name for accessing web front end
    Value: !GetAtt CloudFrontDistribution.DomainName
  # --------------------DESCRIPTION
  WebS3BucketName:
    Description: S3 Bucket for hosting web frontend + backend content files
    Value: !Ref KyueStudioWebsiteS3BucketV2
# # More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
# Globals:
#   Function:
#     Tracing: Active
#     # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
#     LoggingConfig:
#       LogFormat: JSON
#   Api:
#     TracingEnabled: true

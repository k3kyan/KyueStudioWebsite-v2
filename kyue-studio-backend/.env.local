# # GOOD FOR STORING API KEYS, AWS S3 keys, credentials to external services like Amazon S3 or twitter, etc, API Keys, passwords, database configs, secret keys, authentication keys, credentials


# # CONTACTFORMMESSAGES_TABLE_NAME
# BLOGPOSTSMETADATA_TABLE_NAME
# KYUESTUDIOWEBSITES3BUCKETV2_BUCKET_NAME




# import os
# import boto3

# # call the aws resource dynamodb (not specific)
# dynamodb = boto3.resource("dynamodb")

# # get the contactformtable name from lambda environmental variables
# contact_table_name = os.getenv("CONTACTFORMMESSAGES_TABLE_NAME")
# # get the contactformtable..?? idk what exactly its getting tho tbh
# contact_table = dynamodb.Table(contact_table_name)


# # get the blog post table name from lambda environmental variables
# blog_table_name = os.getenv("BLOGPOSTSMETADATA_TABLE_NAME")
# # get the blog post table..?? idk what exactly its getting tho tbh
# blog_table = dynamodb.Table(blog_table_name)

# # Example: read from blog table
# def get_blog_post(post_id: str):
#     response = blog_table.get_item(Key={"id": post_id})
#     return response.get("Item")




# # To verify your Lambda function sees the env vars correctly, you can log them temporarily:
# import os
# print("Env: BLOGPOSTSMETADATA_TABLE_NAME =", os.getenv("BLOGPOSTSMETADATA_TABLE_NAME"))
# # Then view the output in CloudWatch Logs after invoking your Lambda.

























# # AWS Secrets Manager : sensitive keys
# #TODO: I think I don't need "" 's even if its a string..?
# API_BASE_URL=http://localhost:5173
# MY_SECRET_KEY = "sdlkfjslf"
# ADMIN_USERNAME = "tempUsernameEV"
# ADMIN_PASSWORD = "tempPasswordEV"
# ENV_MODE = local # local, aws #DOES THIS NEED TO BE A STRING ???

# # # AWS Lambda Environmental Variables : ok to share ig ..? 
# # # EMAIL_DOMAIN = "@kyuestudio.com"
# # # EMAIL = ks${EMAIL_DOMAIN}
# SECRET_KEY = "725898e2e6208a094e60f59ebf97b32940f4902b1ffe606be5f67dc89cf74ee0" #randomly generated string using command "openssl rand -hex 32"
# ALGORITHM = "HS256"
# ACCESS_TOKEN_EXPIRE_MINUTES = 30
# # DATA_CONTENT_PATH = "/data/content/" // local json file storage, OR S3 bucket storage path... 

# # ---- services/post_service.py, db_service.py, or equivalent // for file storage or database logic -----
# # DB_MODE (local vs aws)
# # AWS_REGION
# # DYNAMODB_TABLE
# # S3_BUCKET
# # if os.getenv("DB_MODE") == "aws":
# #     table_name = os.getenv("DYNAMODB_TABLE")

# # ---- file upload/image processing scripts // If youâ€™re uploading blog post thumbnails, markdown files, etc.:
# # S3_UPLOAD_BUCKET
# # IMAGE_CDN_PATH
# # UPLOAD_PATH_PREFIX

# # ---- main.py
# # FRONTEND_URLS or CORS_ORIGINS
# # DEBUG mode toggle
# # ENV (local, dev, prod)
# # Any global feature toggles
# # DEBUG = os.getenv("ENV") == "local"
# # origins = os.getenv("CORS_ORIGINS", "").split(",")



# # ------File	                Typical Variables Needed -------------------------
# # authentication_routes.py	    ADMIN_USERNAME, ADMIN_PASSWORD
# # auth_handler.py	            JWT_SECRET, JWT_ALGORITHM, TOKEN_EXPIRE_MINUTES
# # post_service.py	            DB_MODE, DYNAMODB_TABLE, S3_BUCKET, AWS_REGION
# # main.py	                    DEBUG, ENV, CORS_ORIGINS, feature flags
# # image_upload.py	            S3_UPLOAD_BUCKET, IMAGE_URL_PREFIX, UPLOAD_PATH
# # test_*.py	                    TEST_DB_PATH, MOCK_USER, TEST_MODE





# # # kinda cool i just realized the .gitignore file already has this marked as not for upload wowow!!!


# # # To access lambda environment variables, just keep using os.getenv() or whatever from python-dotenv
# # # TO access the secrets manager variables in app, MUST ACCESS USING BOTO3 !!! 
# #     # secrets_client = boto3.client('secretsmanager')
# #     # secret_value = secrets_client.get_secret_value(SecretId = 'kyue-fastapi-secrets') // the secret's name is here ...? IDK I'LL LOOK INTO THIS AGAIN LATER. 
# #     # secrets = json.loads(secret_value['SecretString'])
# #     # JWT_SECRET = secrets["JWT_SECRET"]


# # # DO NOT MANUALLY EDIT LAMBDA ENV VARIABLES bc it'll be overwritten next time cloudformation deploys. 


# # # SO FOR SECRETS MANAGER, to create those secret environment variables:
# #     # 1. Create secrets manually (one time)
# #     # 2. reference by name in cloudformation
# #     # make sure the secret created in AWS Secrets Manager, the name is the same as the one referenced in the Cloudformation buildspec.yml

# #     # or something like that...? i think? idk.... research later.... 
# #     # just reference the secret (that i created manually) inside the yml ... ? 
# #     # will need an IAM policy to allow Lambda to read kyuestudiosecrets. not sure if this is done in cloudformation or manually....?







# # # To get the variables in another file
# # from dotenv import load_dotenv
# # import os

# # # load only one file depending on context
# # env_file = ".env.production" if os.getenv("ENV") == "production" else ".env.local"
# # load_dotenv(env_file)

# # print(os.getenv("S3_BUCKET"))

# # # NOTE: TODO: RESEARCH ???? : if you deploy to AWS Lambda, I DONT NEED .ENV.PRODUCTION !!!!! You can use REAL LAMBDA ENVIRONMENT VARIALBES (though aws console or cloudformation)
# # # but ig its good to have a .env.local backend because it'll remind me what env variables i need to upload to AWS, helps keep it matching



# # # OK SO since i'm using AWS, i dont need a .env.production file !!!!  Instead, it'll be
# # # Lambda Environment Variables: will hold non-secret configs like ENV, S3_BUCKET, DB_MODE
# # # AWS Secrets Manager (or SSM parameter store): FOR SENSITIVE VALUES (DB credentials, secret keys, JWT secrets)

# # # use os.getenv("ENV")
# # # because that will pull directly from Lambda's environmental variables

# # # TODO: WHEN MAKING CLOUDFORMATION, define lambda environment variables,
# # ENV = local
# # S3_BUCKET = aws-s3-bucket-name
# # DB_MODE = AWS












# # # Examples
# # # .env.local
# # ENV = local
# # DB_MODE = local
# # S3_BUCKET = /data/content

# # # .env.production
# # ENV = production
# # DB_MODE = AWS
# # S3_BUCKET = aws-s3-bucket-name


# # # Place .env.local in the root of your backend directory, typically alongside your main.py or settings.py file.
















# # # Previously from main.py, worked nicely!
# # from dotenv import load_dotenv, dotenv_values, find_dotenv
# # import os
# # load_dotenv(".env.local") # loads the .env file

# # # # Load environment variables from .env file
# # # # env_var_path = find_dotenv(".env.local") // default is just find_dotenv() if ur file is named just .env
# # # load_dotenv(".env.local")
# # # ADMIN_USERNAME = os.getenv("ADMIN_USERNAME")
# # # print ("Admin username:", ADMIN_USERNAME)
# # # # dict way (WORKS)
# # # env_var = dotenv_values(".env.local")
# # # ADMIN_PASSWORD = env_var["ADMIN_PASSWORD"]
# # # print ("Dict Method: Admin username:", ADMIN_PASSWORD)

